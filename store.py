"""This module implements the storage functionality

Author: MMRAU
"""

import numpy as np
from compress import uncompress_dict
import pandas as pd

pre_tag = 'compressed_'

#uncompress_dict(spline_data, index_data, coadd_id)

def traverse(o, tree_types=(list, tuple)):
    if isinstance(o, tree_types):
        for value in o:
            for subvalue in traverse(value, tree_types):
                yield subvalue
    else:
        yield o


def store_pdf(input_hdf5, coadd_id, compressed_pdf):
    """ Store a compressed PDf in hdf5 format
    Parameters:
    -----------
    input_hdf5: string, specifying the name of the input hdf5 file
    coadd_id: numpy array, vector of coadded object ids
    compressed_pdf: pdf representation generated by the compress routine

    """
    print 'check arguments:'
    print input_hdf5
    print coadd_id
    print compressed_pdf
    #first get the decompressed pdf
    uncomp_data = uncompress_dict(compressed_pdf[0], compressed_pdf[1], coadd_id)
    for idx, el in enumerate(traverse(uncomp_data)):
        assert type(el) == float

    #print uncomp_data
    compressed_df = pd.DataFrame.from_records(uncomp_data)
    #print compressed_df
    #get point predictions

    dfpoint = pd.read_hdf(input_hdf5, key='point_predictions')

    #append the point predictions and the same file and store it in hdf5 format
    store = pd.HDFStore(pre_tag+input_hdf5, mode='a')
    store.append('point_predictions', dfpoint, complevel=5, complib='blosc:snappy')
    store.append('pdf_compr', compressed_df)
    store.close()


if __name__ == '__main__':
    print 'Test if compression is working'
    from read_in import read_file
    from compress import compress_pdf
    from matplotlib import pyplot as plt
    filename = 'Y1A1_GOLD101_Y1A1trainValid_14.12.2015.validsY1A1.25215.out.DES.pdf.hdf5'
    isOk, z_pdf, coadd_id = read_file(filename)
    compressed_pdf = compress_pdf(z_pdf)
    store_pdf(filename, coadd_id, compressed_pdf)
